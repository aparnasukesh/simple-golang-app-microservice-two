// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpcproto/microserviceone.proto

package grpcproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MicroServiceTwoService_MethodOne_FullMethodName = "/microservice_one.MicroServiceTwoService/MethodOne"
	MicroServiceTwoService_MethodTwo_FullMethodName = "/microservice_one.MicroServiceTwoService/MethodTwo"
)

// MicroServiceTwoServiceClient is the client API for MicroServiceTwoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroServiceTwoServiceClient interface {
	MethodOne(ctx context.Context, in *MethodRequest, opts ...grpc.CallOption) (*MethodResponse, error)
	MethodTwo(ctx context.Context, in *MethodRequest, opts ...grpc.CallOption) (*MethodResponse, error)
}

type microServiceTwoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroServiceTwoServiceClient(cc grpc.ClientConnInterface) MicroServiceTwoServiceClient {
	return &microServiceTwoServiceClient{cc}
}

func (c *microServiceTwoServiceClient) MethodOne(ctx context.Context, in *MethodRequest, opts ...grpc.CallOption) (*MethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MethodResponse)
	err := c.cc.Invoke(ctx, MicroServiceTwoService_MethodOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microServiceTwoServiceClient) MethodTwo(ctx context.Context, in *MethodRequest, opts ...grpc.CallOption) (*MethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MethodResponse)
	err := c.cc.Invoke(ctx, MicroServiceTwoService_MethodTwo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroServiceTwoServiceServer is the server API for MicroServiceTwoService service.
// All implementations must embed UnimplementedMicroServiceTwoServiceServer
// for forward compatibility.
type MicroServiceTwoServiceServer interface {
	MethodOne(context.Context, *MethodRequest) (*MethodResponse, error)
	MethodTwo(context.Context, *MethodRequest) (*MethodResponse, error)
	mustEmbedUnimplementedMicroServiceTwoServiceServer()
}

// UnimplementedMicroServiceTwoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMicroServiceTwoServiceServer struct{}

func (UnimplementedMicroServiceTwoServiceServer) MethodOne(context.Context, *MethodRequest) (*MethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodOne not implemented")
}
func (UnimplementedMicroServiceTwoServiceServer) MethodTwo(context.Context, *MethodRequest) (*MethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodTwo not implemented")
}
func (UnimplementedMicroServiceTwoServiceServer) mustEmbedUnimplementedMicroServiceTwoServiceServer() {
}
func (UnimplementedMicroServiceTwoServiceServer) testEmbeddedByValue() {}

// UnsafeMicroServiceTwoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroServiceTwoServiceServer will
// result in compilation errors.
type UnsafeMicroServiceTwoServiceServer interface {
	mustEmbedUnimplementedMicroServiceTwoServiceServer()
}

func RegisterMicroServiceTwoServiceServer(s grpc.ServiceRegistrar, srv MicroServiceTwoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMicroServiceTwoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MicroServiceTwoService_ServiceDesc, srv)
}

func _MicroServiceTwoService_MethodOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServiceTwoServiceServer).MethodOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroServiceTwoService_MethodOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServiceTwoServiceServer).MethodOne(ctx, req.(*MethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroServiceTwoService_MethodTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServiceTwoServiceServer).MethodTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroServiceTwoService_MethodTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServiceTwoServiceServer).MethodTwo(ctx, req.(*MethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroServiceTwoService_ServiceDesc is the grpc.ServiceDesc for MicroServiceTwoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroServiceTwoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice_one.MicroServiceTwoService",
	HandlerType: (*MicroServiceTwoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MethodOne",
			Handler:    _MicroServiceTwoService_MethodOne_Handler,
		},
		{
			MethodName: "MethodTwo",
			Handler:    _MicroServiceTwoService_MethodTwo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcproto/microserviceone.proto",
}
